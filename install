#!/bin/bash
# DOH Development Installation Script
# Installs doh from source for development (editable mode)

set -e

# Configuration - User-level paths
LOCAL_BIN="$HOME/.local/bin"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}${BOLD}==> $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
    exit 1
}

show_usage() {
    echo "DOH Development Installation Script"
    echo
    echo "Usage:"
    echo "  $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  --help, -h    Show this help message"
    echo
    echo "This script installs DOH from source in editable mode for development."
    echo "For end users, use: pip install doh-monitor"
}

check_requirements() {
    print_step "Checking requirements"
    
    # Check for Python 3
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is required but not installed"
    fi
    
    # Check for pip
    if ! command -v pip3 &> /dev/null; then
        print_error "pip3 is required but not installed"
    fi
    
    # Check for git
    if ! command -v git &> /dev/null; then
        print_error "git is required but not installed"
    fi
    
    print_success "All requirements met"
}

create_directories() {
    print_step "Creating user directories"
    
    # Create user's local bin directory
    mkdir -p "$LOCAL_BIN"
    
    print_success "Created directories"
}

install_package() {
    print_step "Installing doh package from source (editable mode)"
    
    # Get the directory where this script is located (should be the project root)
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # Verify we have the source structure
    if [[ ! -f "$SCRIPT_DIR/pyproject.toml" || ! -d "$SCRIPT_DIR/src/doh" ]]; then
        print_error "Source installation requires pyproject.toml and src/doh/ directory"
    fi
    
    # Install the package for the user only (editable mode for development)
    pip3 install --user -e "$SCRIPT_DIR"
    print_success "Package installed from source in editable mode"
}

check_path() {
    print_step "Checking PATH configuration"
    
    # Check if ~/.local/bin is in PATH
    if [[ ":$PATH:" == *":$LOCAL_BIN:"* ]]; then
        print_success "~/.local/bin is already in PATH"
        return
    fi
    
    print_warning "~/.local/bin is not in your PATH"
    echo
    echo "To use 'doh' from anywhere, add this line to your shell profile:"
    echo
    
    # Detect shell and suggest appropriate file
    if [[ "$SHELL" == *"zsh"* ]]; then
        echo "  echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.zshrc"
        echo "  source ~/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        echo "  echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.bashrc"
        echo "  source ~/.bashrc"
    else
        echo "  export PATH=\"\$HOME/.local/bin:\$PATH\""
        echo "  (Add this to your shell's configuration file)"
    fi
    echo
}

setup_daemon() {
    print_step "Setting up user-level systemd daemon"
    
    # Check if systemd is available
    if ! command -v systemctl &> /dev/null; then
        print_warning "systemd not available. DOH will set up daemon on first run."
        return
    fi
    
    # Create systemd user directory
    USER_SYSTEMD_DIR="$HOME/.config/systemd/user"
    mkdir -p "$USER_SYSTEMD_DIR"
    
    # Create the service file
    cat > "$USER_SYSTEMD_DIR/doh-monitor.service" << EOF
[Unit]
Description=DOH Git Repository Monitor
After=graphical-session.target

[Service]
Type=oneshot
ExecStart=$LOCAL_BIN/doh daemon --once
Environment=HOME=$HOME
WorkingDirectory=$HOME

[Install]
WantedBy=default.target
EOF
    
    # Create the timer file
    cat > "$USER_SYSTEMD_DIR/doh-monitor.timer" << EOF
[Unit]
Description=Run DOH Git Repository Monitor every 10 minutes
Requires=doh-monitor.service

[Timer]
OnCalendar=*:0/10
Persistent=true

[Install]
WantedBy=timers.target
EOF
    
    # Reload user systemd
    systemctl --user daemon-reload
    
    # Enable and start the timer
    systemctl --user enable doh-monitor.timer
    systemctl --user start doh-monitor.timer
    
    print_success "User-level daemon configured and started"
}

test_installation() {
    print_step "Testing installation"
    
    # Test if the command works
    if "$LOCAL_BIN/doh" --version &> /dev/null; then
        print_success "Installation test passed"
    elif command -v doh &> /dev/null; then
        print_success "Installation test passed (doh in PATH)"
    else
        print_warning "Command 'doh' not found in PATH. Make sure ~/.local/bin is in your PATH"
    fi
}

main() {
    echo -e "${BOLD}DOH Development Installation Script${NC}"
    echo "Installing DOH from source for development (editable mode)"
    echo
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1. Use --help for usage information."
                ;;
        esac
    done
    
    check_requirements
    create_directories
    install_package
    check_path
    test_installation
    setup_daemon
    
    echo
    echo -e "${GREEN}${BOLD}Development installation completed successfully!${NC}"
    echo
    echo "DOH installed from source in editable mode."
    echo "Changes to the source code will be immediately available."
    echo
    echo "You can now use 'doh' from anywhere (if ~/.local/bin is in PATH):"
    echo "  doh --help"
    echo "  doh add"
    echo "  doh status"
    echo
    echo "Configuration will be stored in ~/.doh/"
    echo
    if command -v systemctl &> /dev/null; then
        echo -e "${GREEN}${BOLD}User daemon is now running and monitoring every 10 minutes!${NC}"
        echo
        echo "To check daemon status:"
        echo "  systemctl --user status doh-monitor.timer"
    else
        echo "Systemd not available - daemon will be set up on first 'doh' run."
    fi
    echo
    echo "To uninstall:"
    echo "  pip3 uninstall doh-monitor"
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n${YELLOW}Installation cancelled by user${NC}"; exit 1' INT

main "$@"
