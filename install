#!/bin/bash
# DOH Installation Script
# Installs doh as a user-level Python package
# Supports both source installation and pip installation

set -e

# Configuration - User-level paths
LOCAL_BIN="$HOME/.local/bin"
SCRIPT_PATH="$LOCAL_BIN/doh"

# Installation modes
INSTALL_FROM_SOURCE=false
INSTALL_FROM_PIP=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}${BOLD}==> $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
    exit 1
}

show_usage() {
    echo "DOH Installation Script"
    echo
    echo "Usage:"
    echo "  $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  --source      Install from source (default when run from git repo)"
    echo "  --pip         Install from PyPI using pip"
    echo "  --help, -h    Show this help message"
    echo
    echo "Examples:"
    echo "  $0             # Auto-detect installation method"
    echo "  $0 --source   # Force source installation"
    echo "  $0 --pip      # Install from PyPI"
}

parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --source)
                INSTALL_FROM_SOURCE=true
                shift
                ;;
            --pip)
                INSTALL_FROM_PIP=true
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1. Use --help for usage information."
                ;;
        esac
    done
}

detect_installation_method() {
    # If both flags are set, that's an error
    if [[ "$INSTALL_FROM_SOURCE" == "true" && "$INSTALL_FROM_PIP" == "true" ]]; then
        print_error "Cannot specify both --source and --pip options"
    fi
    
    # If neither flag is set, auto-detect
    if [[ "$INSTALL_FROM_SOURCE" == "false" && "$INSTALL_FROM_PIP" == "false" ]]; then
        # Check if we're in a git repository with the expected structure
        if [[ -f "pyproject.toml" && -d "src/doh" && -f "src/doh/cli.py" ]]; then
            INSTALL_FROM_SOURCE=true
            print_step "Auto-detected source installation (found pyproject.toml and src/)"
        else
            INSTALL_FROM_PIP=true
            print_step "Auto-detected pip installation (not in source directory)"
        fi
    fi
    
    if [[ "$INSTALL_FROM_SOURCE" == "true" ]]; then
        print_step "Installing from source"
    else
        print_step "Installing from PyPI"
    fi
}

check_requirements() {
    print_step "Checking requirements"
    
    # Check for Python 3
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is required but not installed"
    fi
    
    # Check for pip
    if ! command -v pip3 &> /dev/null; then
        print_error "pip3 is required but not installed"
    fi
    
    # Check for git
    if ! command -v git &> /dev/null; then
        print_error "git is required but not installed"
    fi
    
    print_success "All requirements met"
}

create_directories() {
    print_step "Creating user directories"
    
    # Create user's local bin directory
    mkdir -p "$LOCAL_BIN"
    
    print_success "Created directories"
}

install_package() {
    print_step "Installing doh package (user-level)"
    
    if [[ "$INSTALL_FROM_SOURCE" == "true" ]]; then
        # Get the directory where this script is located (should be the project root)
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        
        # Verify we have the source structure
        if [[ ! -f "$SCRIPT_DIR/pyproject.toml" || ! -d "$SCRIPT_DIR/src/doh" ]]; then
            print_error "Source installation requires pyproject.toml and src/doh/ directory"
        fi
        
        # Install the package for the user only (editable mode for development)
        pip3 install --user -e "$SCRIPT_DIR"
        print_success "Package installed from source in editable mode"
    else
        # Install from PyPI
        pip3 install --user doh-monitor
        print_success "Package installed from PyPI"
    fi
}

check_path() {
    print_step "Checking PATH configuration"
    
    # Check if ~/.local/bin is in PATH
    if [[ ":$PATH:" == *":$LOCAL_BIN:"* ]]; then
        print_success "~/.local/bin is already in PATH"
        return
    fi
    
    print_warning "~/.local/bin is not in your PATH"
    echo
    echo "To use 'doh' from anywhere, add this line to your shell profile:"
    echo
    
    # Detect shell and suggest appropriate file
    if [[ "$SHELL" == *"zsh"* ]]; then
        echo "  echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.zshrc"
        echo "  source ~/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        echo "  echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.bashrc"
        echo "  source ~/.bashrc"
    else
        echo "  export PATH=\"\$HOME/.local/bin:\$PATH\""
        echo "  (Add this to your shell's configuration file)"
    fi
    echo
}

setup_daemon() {
    print_step "Setting up user-level systemd daemon"
    
    # Check if systemd is available
    if ! command -v systemctl &> /dev/null; then
        print_warning "systemd not available. You can manually set up cron later with: ./scripts/cron-setup"
        return
    fi
    
    # Create systemd user directory
    USER_SYSTEMD_DIR="$HOME/.config/systemd/user"
    mkdir -p "$USER_SYSTEMD_DIR"
    
    # Create the service file
    cat > "$USER_SYSTEMD_DIR/doh-monitor.service" << EOF
[Unit]
Description=DOH Git Repository Monitor
After=graphical-session.target

[Service]
Type=oneshot
ExecStart=$LOCAL_BIN/doh daemon --once
Environment=HOME=$HOME
WorkingDirectory=$HOME

[Install]
WantedBy=default.target
EOF
    
    # Create the timer file
    cat > "$USER_SYSTEMD_DIR/doh-monitor.timer" << EOF
[Unit]
Description=Run DOH Git Repository Monitor every 10 minutes
Requires=doh-monitor.service

[Timer]
OnCalendar=*:0/10
Persistent=true

[Install]
WantedBy=timers.target
EOF
    
    # Reload user systemd
    systemctl --user daemon-reload
    
    # Enable and start the timer
    systemctl --user enable doh-monitor.timer
    systemctl --user start doh-monitor.timer
    
    print_success "User-level daemon configured and started"
}

test_installation() {
    print_step "Testing installation"
    
    # Test if the command works
    if "$LOCAL_BIN/doh" --version &> /dev/null; then
        print_success "Installation test passed"
    elif command -v doh &> /dev/null; then
        print_success "Installation test passed (doh in PATH)"
    else
        print_warning "Command 'doh' not found in PATH. Make sure ~/.local/bin is in your PATH"
    fi
}

main() {
    echo -e "${BOLD}DOH Installation Script${NC}"
    echo "Installing DOH as a user-level Python package (no sudo required)"
    echo
    
    parse_arguments "$@"
    detect_installation_method
    check_requirements
    create_directories
    install_package
    check_path
    test_installation
    setup_daemon
    
    echo
    echo -e "${GREEN}${BOLD}Installation completed successfully!${NC}"
    echo
    if [[ "$INSTALL_FROM_SOURCE" == "true" ]]; then
        echo "DOH installed from source in editable mode."
        echo "Changes to the source code will be immediately available."
    else
        echo "DOH installed from PyPI."
    fi
    echo
    echo "You can now use 'doh' from anywhere (if ~/.local/bin is in PATH):"
    echo "  doh --help"
    echo "  doh add"
    echo "  doh status"
    echo
    echo "Configuration will be stored in ~/.doh/"
    echo
    echo -e "${GREEN}${BOLD}User daemon is now running and monitoring every 10 minutes!${NC}"
    echo "The daemon will automatically start when you log in."
    echo
    echo "To check daemon status:"
    echo "  systemctl --user status doh-monitor.timer"
    echo
    echo "To view daemon logs:"
    echo "  journalctl --user -u doh-monitor -f"
    echo
    echo "To stop the daemon:"
    echo "  systemctl --user stop doh-monitor.timer"
    echo
    echo "To uninstall:"
    echo "  ./uninstall  # (if available)"
    echo "  # or manually: pip3 uninstall doh-monitor"
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n${YELLOW}Installation cancelled by user${NC}"; exit 1' INT

main "$@"
