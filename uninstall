#!/bin/bash
# DOH Uninstallation Script
# Removes doh package and user-level systemd daemon

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

print_step() {
    echo -e "${BLUE}${BOLD}==> $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

confirm_uninstall() {
    echo -e "${YELLOW}${BOLD}This will remove DOH and all its configuration!${NC}"
    echo "The following will be removed:"
    echo "  - DOH Python package (pip3 uninstall)"
    echo "  - User systemd daemon (timer and service)"
    echo "  - Configuration directory (~/.doh/)"
    echo
    read -p "Are you sure you want to continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Uninstall cancelled."
        exit 0
    fi
}

stop_daemon() {
    print_step "Stopping and disabling systemd daemon"
    
    if command -v systemctl &> /dev/null; then
        # Stop and disable the timer
        if systemctl --user is-active doh-monitor.timer &> /dev/null; then
            systemctl --user stop doh-monitor.timer
            print_success "Stopped daemon timer"
        fi
        
        if systemctl --user is-enabled doh-monitor.timer &> /dev/null; then
            systemctl --user disable doh-monitor.timer
            print_success "Disabled daemon timer"
        fi
        
        # Remove systemd files
        USER_SYSTEMD_DIR="$HOME/.config/systemd/user"
        if [[ -f "$USER_SYSTEMD_DIR/doh-monitor.service" ]]; then
            rm -f "$USER_SYSTEMD_DIR/doh-monitor.service"
            print_success "Removed systemd service file"
        fi
        
        if [[ -f "$USER_SYSTEMD_DIR/doh-monitor.timer" ]]; then
            rm -f "$USER_SYSTEMD_DIR/doh-monitor.timer"
            print_success "Removed systemd timer file"
        fi
        
        # Reload systemd
        systemctl --user daemon-reload
        print_success "Reloaded systemd configuration"
    else
        print_warning "systemctl not available, skipping daemon cleanup"
    fi
}

uninstall_package() {
    print_step "Uninstalling DOH package"
    
    # Check what package names might be installed
    local packages_to_check=("doh-monitor" "doh")
    local found_packages=()
    
    for package in "${packages_to_check[@]}"; do
        if pip3 list 2>/dev/null | grep -q "^$package "; then
            found_packages+=("$package")
        fi
    done
    
    if [[ ${#found_packages[@]} -eq 0 ]]; then
        print_warning "No DOH packages found in pip"
        return
    fi
    
    # Uninstall found packages
    for package in "${found_packages[@]}"; do
        print_step "Uninstalling $package"
        pip3 uninstall -y "$package"
        print_success "Uninstalled $package"
    done
}

remove_config() {
    print_step "Removing configuration directory"
    
    DOH_CONFIG_DIR="$HOME/.doh"
    if [[ -d "$DOH_CONFIG_DIR" ]]; then
        # Create backup if config exists
        if [[ -f "$DOH_CONFIG_DIR/config.json" ]]; then
            BACKUP_FILE="$HOME/doh-config-backup-$(date +%Y%m%d-%H%M%S).json"
            cp "$DOH_CONFIG_DIR/config.json" "$BACKUP_FILE"
            print_success "Backed up configuration to $BACKUP_FILE"
        fi
        
        rm -rf "$DOH_CONFIG_DIR"
        print_success "Removed configuration directory"
    else
        print_warning "Configuration directory not found"
    fi
}

check_removal() {
    print_step "Verifying removal"
    
    # Check if command still exists
    if command -v doh &> /dev/null; then
        print_warning "doh command still available (may be in PATH from another source)"
    else
        print_success "doh command removed from PATH"
    fi
    
    # Check if any pip packages exist
    local packages_found=false
    for package in "doh-monitor" "doh"; do
        if pip3 list 2>/dev/null | grep -q "^$package "; then
            print_warning "Package $package still installed - uninstall may have failed"
            packages_found=true
        fi
    done
    
    if [[ "$packages_found" == "false" ]]; then
        print_success "All packages successfully removed"
    fi
}

main() {
    echo -e "${BOLD}DOH Uninstallation Script${NC}"
    echo "This will completely remove DOH from your system"
    echo
    
    confirm_uninstall
    stop_daemon
    uninstall_package
    remove_config
    check_removal
    
    echo
    echo -e "${GREEN}${BOLD}DOH has been successfully uninstalled!${NC}"
    echo
    echo "If you backed up your configuration, you can restore it later if needed."
    echo "To reinstall DOH, simply run the install script again."
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n${YELLOW}Uninstall cancelled by user${NC}"; exit 1' INT

main "$@"
