#!/bin/bash
# DOH PyPI Package Builder and Publisher
# Builds and publishes DOH to PyPI

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

print_step() {
    echo -e "${BLUE}${BOLD}==> $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
    exit 1
}

show_usage() {
    echo "DOH PyPI Package Builder and Publisher"
    echo
    echo "Usage:"
    echo "  $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  --build       Build package only (no upload)"
    echo "  --test        Upload to TestPyPI"
    echo "  --prod        Upload to production PyPI"
    echo "  --clean       Clean build artifacts"
    echo "  --help, -h    Show this help message"
    echo
    echo "Examples:"
    echo "  $0 --build     # Build package locally"
    echo "  $0 --test      # Build and upload to TestPyPI"
    echo "  $0 --prod      # Build and upload to PyPI"
}

check_requirements() {
    print_step "Checking build requirements"
    
    # Check for required tools
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is required"
    fi
    
    # Check for build tools
    if ! python3 -c "import build" &> /dev/null; then
        print_warning "build package not found, installing..."
        pip3 install --user build
    fi
    
    if ! python3 -c "import twine" &> /dev/null; then
        print_warning "twine package not found, installing..."
        pip3 install --user twine
    fi
    
    print_success "Build requirements satisfied"
}

clean_artifacts() {
    print_step "Cleaning build artifacts"
    
    # Remove build directories
    for dir in "dist" "build" "src/doh_monitor.egg-info" "src/doh.egg-info"; do
        if [[ -d "$dir" ]]; then
            rm -rf "$dir"
            print_success "Removed $dir"
        fi
    done
    
    # Remove __pycache__ directories
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    print_success "Removed __pycache__ directories"
}

build_package() {
    print_step "Building package"
    
    # Verify we're in the right directory
    if [[ ! -f "pyproject.toml" ]]; then
        print_error "Not in DOH project directory (no pyproject.toml found)"
    fi
    
    # Build the package
    python3 -m build
    
    print_success "Package built successfully"
    
    # Show what was built
    if [[ -d "dist" ]]; then
        echo "Built packages:"
        ls -la dist/
    fi
}

upload_package() {
    local repository="$1"
    
    if [[ ! -d "dist" ]]; then
        print_error "No dist directory found. Run --build first."
    fi
    
    if [[ "$repository" == "test" ]]; then
        print_step "Uploading to TestPyPI"
        python3 -m twine upload --repository testpypi dist/*
        print_success "Uploaded to TestPyPI"
        echo
        echo "To install from TestPyPI:"
        echo "  pip3 install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ doh-monitor"
    elif [[ "$repository" == "prod" ]]; then
        print_step "Uploading to production PyPI"
        echo -e "${YELLOW}${BOLD}WARNING: This will upload to production PyPI!${NC}"
        read -p "Are you sure you want to continue? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Upload cancelled."
            exit 0
        fi
        
        python3 -m twine upload dist/*
        print_success "Uploaded to production PyPI"
        echo
        echo "Package is now available:"
        echo "  pip3 install doh-monitor"
    fi
}

main() {
    local action=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --build)
                action="build"
                shift
                ;;
            --test)
                action="test"
                shift
                ;;
            --prod)
                action="prod"
                shift
                ;;
            --clean)
                action="clean"
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1. Use --help for usage information."
                ;;
        esac
    done
    
    if [[ -z "$action" ]]; then
        show_usage
        exit 1
    fi
    
    case $action in
        clean)
            clean_artifacts
            ;;
        build)
            check_requirements
            clean_artifacts
            build_package
            ;;
        test)
            check_requirements
            clean_artifacts
            build_package
            upload_package "test"
            ;;
        prod)
            check_requirements
            clean_artifacts
            build_package
            upload_package "prod"
            ;;
    esac
}

main "$@"
